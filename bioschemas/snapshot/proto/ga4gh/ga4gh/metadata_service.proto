syntax = "proto3";

package ga4gh;

import "ga4gh/metadata.proto";
import "google/api/annotations.proto";

service MetadataService {
  // Gets a list of `Dataset` matching the search criteria.
  //
  // `POST /datasets/search` must accept a JSON version of
  // `SearchDatasetsRequest` as the post body and will return a JSON
  // version of `SearchDatasetsResponse`.
  rpc SearchDatasets(SearchDatasetsRequest)
    returns (SearchDatasetsResponse) {
      option (google.api.http) = {
        post: "/v0.6.0a8/datasets/search"
        body: "*"
      };
    };

  // Gets a `Dataset` by ID.
  //
  // `GET /datasets/{dataset_id}` will return a JSON version of
  // `Dataset`.
  rpc GetDataset(GetDatasetRequest)
    returns (Dataset) {
      option (google.api.http) = {
        get: "/v0.6.0a8/datasets/{dataset_id}"
      };
    };

}

// ****************  /datasets  *******************

// This request maps to the body of `POST /datasets/search` as JSON.
message SearchDatasetsRequest {
  // Specifies the maximum number of results to return in a single page.
  // If unspecified, a system default will be used.
  int32 page_size = 1;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `next_page_token` from the previous response.
  string page_token = 2;
}

// This is the response from `POST /datasets/search` expressed as JSON.
message SearchDatasetsResponse {
  // The list of datasets.
  repeated Dataset datasets = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}

// This request maps to the URL `GET /datasets/{dataset_id}`.
message GetDatasetRequest {
  // The ID of the `Dataset` to be retrieved.
  string dataset_id = 1;
}
