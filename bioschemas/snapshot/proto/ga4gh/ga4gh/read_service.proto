syntax = "proto3";

package ga4gh;

import "ga4gh/reads.proto";
import "google/api/annotations.proto";

service ReadService {
  // Gets a list of `ReadGroupSet` matching the search criteria.
  //
  // `POST /readgroupsets/search` must accept a JSON version of
  // `SearchReadGroupSetsRequest` as the post body and will return a JSON
  // version of `SearchReadGroupSetsResponse` . Only readgroups that
  // match an optionally supplied bioSampleId will be included in the
  // response.
  rpc SearchReadGroupSets(SearchReadGroupSetsRequest)
    returns (SearchReadGroupSetsResponse) {
      option (google.api.http) = {
        post: "/v0.6.0a8/readgroupsets/search"
        body: "*"
      };
    };

  // Gets a `ReadGroupSet` by ID.
  //
  // `GET /readgroupsets/{read_group_set_id}` will return a JSON version of
  // `ReadGroupSet`.
  rpc GetReadGroupSet(GetReadGroupSetRequest)
    returns (ReadGroupSet) {
      option (google.api.http) = {
        get: "/v0.6.0a8/readgroupsets/{read_group_set_id}"
      };
    };

  // Gets a list of `ReadAlignment` s for one or more `ReadGroup` s.
  //
  // `searchReads` operates over a genomic coordinate space of reference sequence
  // and position defined by the `Reference` s to which the requested `ReadGroup` s are
  // aligned.
  //
  // If a target positional range is specified, search returns all reads whose
  // alignment to the reference genome *overlap* the range. A query which specifies
  // only read group IDs yields all reads in those read groups, including unmapped
  // reads.
  //
  // All reads returned (including reads on subsequent pages) are ordered by genomic
  // coordinate (by reference sequence, then position). Reads with equivalent genomic
  // coordinates are returned in an unspecified order. This order must be consistent
  // for a given repository, such that two queries for the same content (regardless
  // of page size) yield reads in the same order across their respective streams of
  // paginated responses.
  //
  // `POST /reads/search` must accept a JSON version of `SearchReadsRequest` as
  // the post body and will return a JSON version of `SearchReadsResponse`.
  rpc SearchReads(SearchReadsRequest)
    returns (SearchReadsResponse) {
      option (google.api.http) = {
        post: "/v0.6.0a8/reads/search"
        body: "*"
      };
    };
}

// ******************  /readgroupsets  *********************/

// This request maps to the body of `POST /readgroupsets/search` as JSON.
//
// TODO: Factor this out to a common API patterns section.
// - If searching by a resource ID, and that resource is not found, the method
//   will return a `404` HTTP status code (`NOT_FOUND`).
// - If searching by other attributes, e.g. `name`, and no matches are found, the
//   method will return a `200` HTTP status code (`OK`) with an empty result list.
message SearchReadGroupSetsRequest {
  // The dataset to search.
  string dataset_id = 1;

  // Only return read group sets with this name (case-sensitive, exact match).
  string name = 2;

  //  Specifying the id of a BioSample record will return only readgroups
  //  with the given bioSampleId.
  string bio_sample_id = 3;

  // Specifies the maximum number of results to return in a single page.
  // If unspecified, a system default will be used.
  int32 page_size = 4;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `next_page_token` from the previous response.
  string page_token = 5;
}

// This is the response from `POST /readgroupsets/search` expressed as JSON.
message SearchReadGroupSetsResponse {
  // The list of matching read group sets.
  repeated ReadGroupSet read_group_sets = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}

// This request maps to the URL `GET /readgroupsets/{read_group_set_id}`.
message GetReadGroupSetRequest {
  // The ID of the `ReadGroupSet` to be retrieved.
  string read_group_set_id = 1;
}

// ******************  /reads  *********************
// This request maps to the body of `POST /reads/search` as JSON.
//
// If a reference is specified, all queried `ReadGroup`s must be aligned
// to `ReferenceSet`s containing that same `Reference`. If no reference is
// specified, all `ReadGroup`s must be aligned to the same `ReferenceSet`.
message SearchReadsRequest {
  // The ReadGroups to search. At least one id must be specified.
  repeated string read_group_ids = 1;

  // The reference to query. Leaving blank returns results from all
  // references, including unmapped reads - this could be very large.
  string reference_id = 2;

  // The start position (0-based) of this query.
  // If a reference is specified, this defaults to 0.
  // Genomic positions are non-negative integers less than reference length.
  // Requests spanning the join of circular genomes are represented as
  // two requests one on each side of the join (position 0).
  int64 start = 3;

  // The end position (0-based, exclusive) of this query.
  // If a reference is specified, this defaults to the
  // reference's length.
  int64 end = 4;

  // Specifies the maximum number of results to return in a single page.
  // If unspecified, a system default will be used.
  int32 page_size = 5;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `next_page_token` from the previous response.
  string page_token = 6;
}

// This is the response from `POST /reads/search` expressed as JSON.
message SearchReadsResponse {
  // The list of matching alignment messages, sorted by position.
  // Unmapped reads, which have no position, are returned last.
  repeated ReadAlignment alignments = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}
