syntax = "proto3";

package ga4gh;

import "ga4gh/sequence_annotations.proto";
import "google/api/annotations.proto";

service SequenceAnnotationService {
  // Gets a list of `FeatureSet` matching the search criteria.
  //
  // `POST /featuresets/search` must accept a JSON version of
  // `SearchFeatureSetsRequest` as the post body and will return a JSON version
  // of `SearchFeatureSetsResponse`.
  rpc SearchFeatureSets(SearchFeatureSetsRequest)
    returns (SearchFeatureSetsResponse) {
      option (google.api.http) = {
        post: "/v0.6.0a8/featuresets/search"
        body: "*"
      };
    };

  // Gets a `FeatureSet` by ID.
  //
  // `GET /featuresets/{id}` will return a JSON version of `FeatureSet`.
  rpc GetFeatureSet(GetFeatureSetRequest)
    returns (FeatureSet) {
      option (google.api.http) = {
        get: "/v0.6.0a8/featuresets/{feature_set_id}"
      };
    };

  // Gets a list of `Feature` matching the search criteria.
  //
  // `POST /features/search` must accept a JSON version of
  // `SearchFeaturesRequest` as the post body and will return a JSON version of
  // `SearchFeaturesResponse`.
  rpc SearchFeatures(SearchFeaturesRequest)
    returns (SearchFeaturesResponse) {
      option (google.api.http) = {
        post: "/v0.6.0a8/features/search"
        body: "*"
      };
    };

  // Gets a `Feature` by ID.
  //
  // `GET /features/{id}` will return a JSON version of `Feature`.
  rpc GetFeature(GetFeatureRequest)
    returns (Feature) {
      option (google.api.http) = {
        get: "/v0.6.0a8/features/{feature_id}"
      };
    };

}

/******************  /featuresets  *********************/
/** This request maps to the body of `POST /featuresets/search` as JSON. */
message SearchFeatureSetsRequest {
  // The `Dataset` to search.
  string dataset_id = 1;

  // Specifies the maximum number of results to return in a single page.
  // If unspecified, a system default will be used.
  int32 page_size = 2;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `next_page_token` from the previous response.
  string page_token = 3;
}

// This is the response from `POST /featuresets/search` expressed as JSON.
message SearchFeatureSetsResponse {
  // The list of matching feature sets.
  repeated FeatureSet feature_sets = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}

// This request maps to the URL `GET /featuresets/{id}`.
message GetFeatureSetRequest {
  // The ID of the `FeatureSet` to be retrieved.
  string feature_set_id = 1;
}

/****************** /features *****************/
// This request maps to the body of `POST /features/search` as JSON.
message SearchFeaturesRequest {
  // The annotation set to search within. Either `feature_set_id` or
  // `parent_id` must be non-empty.
  string feature_set_id = 1;

  // Only returns features with this name (case-sensitive, exact match).
  string name = 2;

  // Only return features with matching the provided gene symbol
  // (case-sensitive, exact match).
  // This field may be replaced with a more generic representation
  // in a future version.
  string gene_symbol = 3;

  // Restricts the search to direct children of the given parent `feature`
  // ID. Either `feature_set_id` or `parent_id` must be non-empty.
  string parent_id = 4;

  // Only return features on the reference with this name
  // (matched to literal reference name as imported from the GFF3).
  string reference_name = 5;

  // Required, if name or symbol not provided.
  // The beginning of the window (0-based, inclusive) for which
  // overlapping features should be returned.  Genomic positions are
  // non-negative integers less than reference length.  Requests spanning the
  // join of circular genomes are represented as two requests one on each side
  // of the join (position 0).
  int64 start = 6;

  // Required, if name or symbol not provided.
  // The end of the window (0-based, exclusive) for which overlapping
  // features should be returned.
  int64 end = 7;

  // TODO: To be replaced with a fully featured ontology search
  // once the Metadata definitions are rounded out.
  // If specified, this query matches only annotations whose `feature_type`
  // matches one of the provided ontology terms.
  repeated string feature_types = 8;

  // Specifies the maximum number of results to return in a single page.
  // If unspecified, a system default will be used.
  int32 page_size = 9;

  // The continuation token, which is used to page through large result sets.
  // To get the next page of results, set this parameter to the value of
  // `next_page_token` from the previous response.
  string page_token = 10;
}

// This is the response from `POST /features/search` expressed as JSON.
message SearchFeaturesResponse {
  // The list of matching annotations, sorted by start position. Annotations
  // which share a start position are returned in a deterministic order.
  repeated Feature features = 1;

  // The continuation token, which is used to page through large result sets.
  // Provide this value in a subsequent request to return the next page of
  // results. This field will be empty if there aren't any additional results.
  string next_page_token = 2;
}

// This request maps to the URL `GET /features/{id}`.
message GetFeatureRequest {
  // The ID of the `Feature` to be retrieved.
  string feature_id = 1;
}
